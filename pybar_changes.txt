
Date: 15/07/13

REMEMBER TO INSTALL PYBAR!
	"python setup.py develop"

ENABLING THE HIT TABLE:
	In analyze_raw_data.py, line 153 "self.create_hit_table = False" set to True in host/pybar/analysis

IGNORE RX 8B10B ERRORS:
	In the particular scan that you want (ex: stop mode):
	self.fifo_readout.start(reset_sram_fifo=False, clear_buffer=True, callback=self.handle_data, errback=None, no_data_timeout=self.no_data_timeout) # was errback=self.handle_err; ignore RX 8b10b errors

CONFIGURATIONS:
	In "configuration.yaml":
	fe_flavor : fei4b # was fei4a
	module_id : module_202_new # was module_test

	In "tune_fei4.py":
	target_threshold : 60,  # target threshold # was 50; units of PlsrDAC (1 PlsrDAC = ~50 e)
    target_charge : 375,  # target charge # was 280; units of PlsrDAC
    target_tot : 9,  # target ToT # was 5; ToT code units

    In "scan_analog.py":
    scan_parameters : {'PlsrDAC': 375} # was 280

    Note: "target_threshold" sets the amount of charge needed for a pixel to sense a hit. "target_charge" and "target_tot" set how much charge will correspond to how much tot.

HOMEMADE SCRIPTS FOLDER:
	Created homemade_scripts folder in the main pybar software folder. Copied the contents from tag 2.0.2. Connected it with github.

RUN_EXTRA_INFO.TXT:
	In this folder, I created run_extra_info.txt to store info about runs, such as source and GEM voltage, Pcp (pressure), and other parameters.

EXT TRIGGER STOP MODE:
	In "scan_ext_trigger_stop_mode.py":
	"trigger_latency": 10,  # FE global register Trig_Lat. The lower the value the longer the hit data will be stored in data buffer
    "trigger_delay": 180,  # delay between trigger and stop mode command
    "bcid_window": 255,  # Number of consecurive time slices to be read, from 0 to 255

    In "dut_configuration_mio.yaml" in pybar folder:
    #Trigger
    TLU:
	    TRIGGER_MODE        : 0  # Selecting trigger mode: Use trigger inputs/trigger select (0), TLU no handshake (1), TLU simple handshake (2), TLU data handshake (3)
	    TRIGGER_SELECT      : 1  # Selecting trigger input: RX2 (TDC loop-through) (4), RX0 (2), MonHit/HitOR from Adapter Card (1), disabled (0)
	    TRIGGER_INVERT      : 0  # Inverting trigger invert
	    TRIGGER_VETO_SELECT : 255  # Selecting trigger veto: RX1 (2), RX FIFO full (1), disabled (0)

12MHZ CLOCK SETUP:
	1) Download the mio_12MHz.bit from Jens email (or it might be in the updated github branch now). In dut_configuration_mio.yaml:

	USB:
	    bit_file       : "mio_12MHz.bit"  # Selecting FPGA firmware
	    board_id       : # Selecting USBpix board by ID
	    avoid_download : False  # Avoiding download of FPGA firmware if already initialized

	2) In the config file (.cfg) you are using, you must change all 6 clock settings to 0, in order to have the system use the ref clocks only. The 6 clock settings (global parameters) in the .cfg file are:

	CLK0_S0 0
	CLK0_S1 0
	CLK0_S2 0
	CLK1_S0 0
	CLK1_S1 0
	CLK1_S2 0

	3) In the file pybar/fei4/register.py, line ~214, change the line from

	return int(336. / mask_steps * 25. + 600)

	to

	return int(336. / mask_steps * 25. + 600 * 7)

	

